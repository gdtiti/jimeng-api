{
  "scripts": {
    "dev": "tsup src/index.ts --format cjs,esm --sourcemap --dts --publicDir public --watch --onSuccess \"node --enable-source-maps --no-node-snapshot dist/index.js\"",
    "start": "node --enable-source-maps --no-node-snapshot dist/index.js",
    "build": "tsup src/index.ts --format cjs,esm --sourcemap --dts --clean --publicDir public",
    "test": "node examples/usage-examples.js",
    "test:auth": "node -e \"const { CookieManager } = require('./dist/lib/auth/cookie-manager.js'); console.log('Testing cookie management...');\"",
    "test:urls": "node -e \"const { URLManager } = require('./dist/lib/config/url-manager.js'); const manager = URLManager.getInstance(); console.log('URL configs:', manager.getConfigStats());\"",
    "test:cookie-parse": "node -e \"const { CookieManager } = require('./dist/lib/auth/cookie-manager.js'); const testCookie = 'sessionid=token123.....capcut_locale=en.....uid_tt=user456'; console.log('Parsed:', CookieManager.parseCookie(testCookie));\"",
    "examples": "node examples/usage-examples.js",
    "examples:basic": "node -e \"const { generateCookieString, runAllExamples } = require('./examples/usage-examples.js'); console.log('Generated Cookie:', generateCookieString('test-token', 'us'));\"",
    "examples:auth": "node -e \"const { cookieManagementExample, regionDetectionExample } = require('./examples/usage-examples.js'); cookieManagementExample(); regionDetectionExample();\"",
    "examples:urls": "node -e \"const { urlManagementExample, urlAvailabilityTest } = require('./examples/usage-examples.js'); urlManagementExample();\"",
    "config:validate": "node -e \"const { URLManager } = require('./dist/lib/config/url-manager.js'); const manager = URLManager.getInstance(); const stats = manager.getConfigStats(); console.log('✅ URL配置验证通过'); console.log('配置数量:', Object.keys(stats).length);\"",
    "config:test": "node -e \"const { URLManager } = require('./dist/lib/config/url-manager.js'); const manager = URLManager.getInstance(); Promise.all(['jimeng-cn', 'jimeng-us'].map(name => manager.testURLAvailability(manager.getAvailableURL(name)))).then(results => console.log('URL测试结果:', results));\"",
    "auth:test": "node -e \"const { CookieManager } = require('./dist/lib/auth/cookie-manager.js'); const tests = ['sessionid=test.....capcut_locale=zh-CN', 'us-token123', 'invalid-cookie']; tests.forEach(test => { try { const result = CookieManager.parseCookie(test); console.log('✅', test.substring(0, 20), '->', result.region); } catch(e) { console.log('❌', test.substring(0, 20), '->', e.message); } });\"",
    "monitor:auth": "node -e \"const { AuthManager } = require('./dist/lib/auth/auth-manager.js'); const manager = AuthManager.getInstance(); setInterval(() => { console.log('Auth cache stats:', manager.getAuthStats()); }, 10000);\"",
    "monitor:urls": "node -e \"const { URLManager } = require('./dist/lib/config/url-manager.js'); const manager = URLManager.getInstance(); setInterval(() => { console.log('URL stats:', manager.getConfigStats()); }, 15000);\"",
    "health-check": "node -e \"const { URLManager } = require('./dist/lib/config/url-manager.js'); const manager = URLManager.getInstance(); Promise.all(['jimeng-cn', 'jimeng-us', 'imagex-cn', 'imagex-us'].map(name => manager.getFastestURL(name))).then(urls => { console.log('✅ 所有URL健康检查通过'); console.log('快速URL:', urls); }).catch(err => console.error('❌ 健康检查失败:', err.message));\"",
    "setup:config": "node -e \"const fs = require('fs'); const path = require('path'); const configPath = path.join(process.cwd(), 'config.yml'); if (!fs.existsSync(configPath)) { fs.copyFileSync(path.join(process.cwd(), 'config-example.yml'), configPath); console.log('✅ 配置文件已创建: config.yml'); } else { console.log('ℹ️  配置文件已存在'); }\"",
    "setup:env": "node -e \"const fs = require('fs'); const envExample = '# 即梦API环境变量配置\\n\\n# 服务配置\\nPORT=5566\\nHOST=0.0.0.0\\n\\n# URL配置\\nJIMENG_CN_URLS=https://jimeng.jianying.com\\nJIMENG_US_URLS=https://api-proxy-1.deno.dev/dreamina/us;https://dreamina-api.us.capcut.com\\nIMAGEX_CN_URLS=https://imagex.bytedanceapi.com\\nIMAGEX_US_URLS=https://imagex16-normal-us-ttp.capcutapi.us\\nCOMMERCE_US_URLS=https://commerce.us.capcut.com\\n\\n# 认证配置\\nAUTH_CACHE_TTL=300000\\n\\n# 日志配置\\nLOG_LEVEL=info\\n'; const envPath = path.join(process.cwd(), '.env'); if (!fs.existsSync(envPath)) { fs.writeFileSync(envPath, envExample); console.log('✅ 环境变量文件已创建: .env'); } else { console.log('ℹ️  环境变量文件已存在'); }\"",
    "docker:build": "docker build -t jimeng-api:latest .",
    "docker:run": "docker run -p 5566:5566 --env-file .env jimeng-api:latest",
    "docker:dev": "docker-compose up --build",
    "lint": "eslint src --ext .ts",
    "lint:fix": "eslint src --ext .ts --fix",
    "format": "prettier --write \"src/**/*.{ts,js,json}\" \"examples/**/*.{js,json}\"",
    "format:check": "prettier --check \"src/**/*.{ts,js,json}\" \"examples/**/*.{js,json}\"",
    "type-check": "tsc --noEmit",
    "clean": "rimraf dist",
    "clean:cache": "rimraf .cache",
    "pre-commit": "npm run type-check && npm run lint && npm run format:check",
    "release": "npm run clean && npm run build && npm run test",
    "debug": "node --inspect-brk --enable-source-maps --no-node-snapshot dist/index.js",
    "benchmark": "node -e \"const start = Date.now(); const { request } = require('./dist/api/controllers/core-enhanced'); const testCookie = 'sessionid=test.....capcut_locale=en'; request('POST', '/ping', testCookie, { serviceType: 'jimeng' }).then(() => console.log('请求耗时:', Date.now() - start, 'ms')).catch(console.error);\"",
    "docs:generate": "node -e \"const fs = require('fs'); const path = require('path'); const docs = { title: '即梦API新认证机制', version: '1.0.0', features: ['智能Cookie解析', '多地址轮询', '自动地区检测', '向后兼容'], usage: { cookie: '使用.....分隔的cookie字符串', token: '支持旧格式refreshToken', urls: '支持多个URL配置' } }; fs.writeFileSync(path.join(process.cwd(), 'docs', 'api-summary.json'), JSON.stringify(docs, null, 2)); console.log('✅ API文档已生成');\"",
    "docs:serve": "python -m http.server 8080 --directory docs",
    "migration:check": "node -e \"console.log('📋 迁移检查:'); console.log('✅ Cookie管理器已就绪'); console.log('✅ URL管理器已就绪'); console.log('✅ 增强版请求函数已就绪'); console.log('ℹ️  请运行 npm run examples 来测试新功能');\"",
    "demo:cookie": "node -e \"const { generateCookieString } = require('./examples/usage-examples.js'); const cnCookie = generateCookieString('demo-token', 'cn'); const usCookie = generateCookieString('demo-token', 'us'); console.log('🍪 中国版Cookie:'); console.log(cnCookie); console.log('\\n🌍 国际版Cookie:'); console.log(usCookie);\"",
    "demo:auth": "node -e \"const { AuthManager } = require('./dist/lib/auth/auth-manager.js'); const manager = AuthManager.getInstance(); const testCookie = 'sessionid=demo123.....capcut_locale=en.....uid_tt=demo456'; manager.getAuthInfo(testCookie).then(info => { console.log('🔐 认证信息:'); console.log(JSON.stringify(info, null, 2)); }).catch(console.error);\"",
    "demo:urls": "node -e \"const { URLManager } = require('./dist/lib/config/url-manager.js'); const manager = URLManager.getInstance(); console.log('🌐 URL配置:'); Object.entries(manager.getConfigStats()).forEach(([name, config]) => { console.log(\\`\\\\n\\\${config.name} (\\\${name}):\\\`); console.log(\\`  策略: \\\${config.strategy}\\\`); console.log(\\`  URLs: \\\${config.urls.join(', ')}\\\`); });\"",
    "validate:all": "npm run config:validate && npm run health-check && npm run auth:test && npm run type-check",
    "quick-start": "npm run setup:config && npm run setup:env && npm run build && npm run validate:all && echo '\\n🚀 快速设置完成！现在可以运行 npm start 启动服务'",
    "dev:enhanced": "npm run dev & npm run monitor:auth & npm run monitor:urls",
    "test:integration": "node -e \"console.log('🧪 集成测试开始...'); const { runAllExamples } = require('./examples/usage-examples.js'); runAllExamples().then(() => console.log('✅ 集成测试完成')).catch(err => console.error('❌ 集成测试失败:', err.message));\""
  },
  "description": "增强版脚本配置 - 支持新认证机制和URL管理"
}